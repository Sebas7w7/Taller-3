package taller

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class MultMatrizParTest extends AnyFunSuite {

  val taller3 = new Taller3()

    val matriz1 = Vector.tabulate(16, 16)((i, j) => 2 * (i * 16 + j + 1))

  val matriz2 = Vector.tabulate(16, 16)((i, j) => 2 * (i * 16 + j) + 1)

  val identidad = Vector.tabulate(16, 16)((i, j) => if (i == j) 1 else 0)

  val matrizCero = Vector.fill(16, 16)(0)

  test("Multiplicación paralela de matrices") {
    val resultadoEsperado = Vector(
    Vector(87312, 87856, 88400, 88944, 89488, 90032, 90576, 91120, 91664, 92208, 92752, 93296, 93840, 94384, 94928, 95472),
    Vector(210704, 212272, 213840, 215408, 216976, 218544, 220112, 221680, 223248, 224816, 226384, 227952, 229520, 231088, 232656, 234224), 
    Vector(334096, 336688, 339280, 341872, 344464, 347056, 349648, 352240, 354832, 357424, 360016, 362608, 365200, 367792, 370384, 372976), 
    Vector(457488, 461104, 464720, 468336, 471952, 475568, 479184, 482800, 486416, 490032, 493648, 497264, 500880, 504496, 508112, 511728), 
    Vector(580880, 585520, 590160, 594800, 599440, 604080, 608720, 613360, 618000, 622640, 627280, 631920, 636560, 641200, 645840, 650480), 
    Vector(704272, 709936, 715600, 721264, 726928, 732592, 738256, 743920, 749584, 755248, 760912, 766576, 772240, 777904, 783568, 789232), 
    Vector(827664, 834352, 841040, 847728, 854416, 861104, 867792, 874480, 881168, 887856, 894544, 901232, 907920, 914608, 921296, 927984), 
    Vector(951056, 958768, 966480, 974192, 981904, 989616, 997328, 1005040, 1012752, 1020464, 1028176, 1035888, 1043600, 1051312, 1059024, 1066736), 
    Vector(1074448, 1083184, 1091920, 1100656, 1109392, 1118128, 1126864, 1135600, 1144336, 1153072, 1161808, 1170544, 1179280, 1188016, 1196752, 1205488), 
    Vector(1197840, 1207600, 1217360, 1227120, 1236880, 1246640, 1256400, 1266160, 1275920, 1285680, 1295440, 1305200, 1314960, 1324720, 1334480, 1344240), 
    Vector(1321232, 1332016, 1342800, 1353584, 1364368, 1375152, 1385936, 1396720, 1407504, 1418288, 1429072, 1439856, 1450640, 1461424, 1472208, 1482992), 
    Vector(1444624, 1456432, 1468240, 1480048, 1491856, 1503664, 1515472, 1527280, 1539088, 1550896, 1562704, 1574512, 1586320, 1598128, 1609936, 1621744), 
    Vector(1568016, 1580848, 1593680, 1606512, 1619344, 1632176, 1645008, 1657840, 1670672, 1683504, 1696336, 1709168, 1722000, 1734832, 1747664, 1760496), 
    Vector(1691408, 1705264, 1719120, 1732976, 1746832, 1760688, 1774544, 1788400, 1802256, 1816112, 1829968, 1843824, 1857680, 1871536, 1885392, 1899248), 
    Vector(1814800, 1829680, 1844560, 1859440, 1874320, 1889200, 1904080, 1918960, 1933840, 1948720, 1963600, 1978480, 1993360, 2008240, 2023120, 2038000), 
    Vector(1938192, 1954096, 1970000, 1985904, 2001808, 2017712, 2033616, 2049520, 2065424, 2081328, 2097232, 2113136, 2129040, 2144944, 2160848, 2176752)

    )

    assert(taller3.multMatrizPar(matriz1, matriz2) == resultadoEsperado)
  }



  test("Multiplicación paralela de una matriz con la matriz identidad") {
  val resultadoEsperado = matriz1
  assert(taller3.multMatrizPar(matriz1, identidad) == resultadoEsperado)
}


  
  test("Multiplicación paralela de una matriz con una matriz de ceros") {
    assert(taller3.multMatrizPar(matriz2, matrizCero) == matrizCero)
  }

  
  test("Multiplicación paralela de una matriz con una de valores negativos") {
    val matrizNegativa = Vector.tabulate(16, 16)((i, j) => -2 * (i * 16 + j + 1))

    val resultado = Vector(
      Vector(-87584, -88128, -88672, -89216, -89760, -90304, -90848, -91392, -91936, -92480, -93024, -93568, -94112, -94656, -95200, -95744), 
      Vector(-211488, -213056, -214624, -216192, -217760, -219328, -220896, -222464, -224032, -225600, -227168, -228736, -230304, -231872, -233440, -235008), 
      Vector(-335392, -337984, -340576, -343168, -345760, -348352, -350944, -353536, -356128, -358720, -361312, -363904, -366496, -369088, -371680, -374272),
      Vector(-459296, -462912, -466528, -470144, -473760, -477376, -480992, -484608, -488224, -491840, -495456, -499072, -502688, -506304, -509920, -513536),
      Vector(-583200, -587840, -592480, -597120, -601760, -606400, -611040, -615680, -620320, -624960, -629600, -634240, -638880, -643520, -648160, -652800),
      Vector(-707104, -712768, -718432, -724096, -729760, -735424, -741088, -746752, -752416, -758080, -763744, -769408, -775072, -780736, -786400, -792064),
      Vector(-831008, -837696, -844384, -851072, -857760, -864448, -871136, -877824, -884512, -891200, -897888, -904576, -911264, -917952, -924640, -931328),
      Vector(-954912, -962624, -970336, -978048, -985760, -993472, -1001184, -1008896, -1016608, -1024320, -1032032, -1039744, -1047456, -1055168, -1062880, -1070592), 
      Vector(-1078816, -1087552, -1096288, -1105024, -1113760, -1122496, -1131232, -1139968, -1148704, -1157440, -1166176, -1174912, -1183648, -1192384, -1201120, -1209856),
      Vector(-1202720, -1212480, -1222240, -1232000, -1241760, -1251520, -1261280, -1271040, -1280800, -1290560, -1300320, -1310080, -1319840, -1329600, -1339360, -1349120), 
      Vector(-1326624, -1337408, -1348192, -1358976, -1369760, -1380544, -1391328, -1402112, -1412896, -1423680, -1434464, -1445248, -1456032, -1466816, -1477600, -1488384),
      Vector(-1450528, -1462336, -1474144, -1485952, -1497760, -1509568, -1521376, -1533184, -1544992, -1556800, -1568608, -1580416, -1592224, -1604032, -1615840, -1627648),
      Vector(-1574432, -1587264, -1600096, -1612928, -1625760, -1638592, -1651424, -1664256, -1677088, -1689920, -1702752, -1715584, -1728416, -1741248, -1754080, -1766912),
      Vector(-1698336, -1712192, -1726048, -1739904, -1753760, -1767616, -1781472, -1795328, -1809184, -1823040, -1836896, -1850752, -1864608, -1878464, -1892320, -1906176),
      Vector(-1822240, -1837120, -1852000, -1866880, -1881760, -1896640, -1911520, -1926400, -1941280, -1956160, -1971040, -1985920, -2000800, -2015680, -2030560, -2045440),
      Vector(-1946144, -1962048, -1977952, -1993856, -2009760, -2025664, -2041568, -2057472, -2073376, -2089280, -2105184, -2121088, -2136992, -2152896, -2168800, -2184704)
      
    )
    assert(taller3.multMatrizPar(matriz1, matrizNegativa) == resultado) // El resultado será una matriz 2x2
  }

  
  test("Multiplicación paralela de matrices con valores extremos") {
    val matrizMaximos = Vector.fill(16, 16)(Int.MaxValue)
    val matrizMinimos = Vector.fill(16, 16)(Int.MinValue)
    val resultadoEsperado = Vector.fill(16, 16)(0)
    assert(taller3.multMatrizPar(matrizMaximos, matrizMinimos) == resultadoEsperado)
  }

}
